package simpleclient.module.exploit;

import net.minecraft.entity.player.PlayerInventory;
import net.minecraft.item.FoodComponent;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.screen.slot.SlotActionType;
import simpleclient.module.Mod;
import simpleclient.module.ModuleManager;
import simpleclient.module.combat.KillAura;
import simpleclient.module.settings.BooleanSetting;
import simpleclient.module.settings.NumberSetting;

public class AutoEat extends Mod{
	
	private int hunger = 6;
	private int previousItemSlot = -1;
	private int previousFoodSlot = -1;
	private boolean doEat = false;
	public NumberSetting hungerOption = new NumberSetting("Hunger", 1, 10, 6, 1);
	public BooleanSetting grabFromInventory = new BooleanSetting("GFI", false);
	
	public AutoEat() {
		super("AutoEat", "Automatically eats the best food in your hotbar", Category.EXPLOIT);
		addSettings(hungerOption, grabFromInventory);
	}
	
	public void setHunger(int hunger) {
		this.hungerOption.setValue((double)hunger);
	}
	
	@Override
	public void onTick() {
		if (mc.player == null) return;
		setHunger(hungerOption.getValueInt());
		KillAura ka = (KillAura)ModuleManager.INSTANCE.getModule("Kill Aura");
		if (ka != null) {
			if (ka.isEnabled() && ka.attacking) {
				return;
			}
		}
		if (mc.player.getHungerManager().getFoodLevel() <= hunger) {
			int foodSlot = -1;
			FoodComponent bestFood = null;
			if (!grabFromInventory.isEnabled()) {
				for(int i = 0; i< 9; i++) {
					Item item = mc.player.getInventory().getStack(i).getItem();
					
					if(!item.isFood()) {
						continue;
					}
					FoodComponent food = item.getFoodComponent();
					if(bestFood != null) {
						if(food.getHunger() > bestFood.getHunger()) {
							bestFood = food;
							foodSlot = i;
						}
					} else {
						bestFood = food;
						foodSlot = i;
					}
					
				}
				
				if (bestFood != null) {
					mc.player.getInventory().selectedSlot = foodSlot;
					mc.options.useKey.setPressed(true);
				}
			} else {
				ItemStack heldItem = mc.player.getMainHandStack();
				if (!(heldItem.getItem().isFood())) {
					PlayerInventory playerInventory = mc.player.getInventory();
					for (int i = 0; i < playerInventory.size(); i++) {
						ItemStack item = playerInventory.getStack(i);
						if (!item.isEmpty() && item.getItem().isFood()) {
							if (PlayerInventory.isValidHotbarIndex(i)) {
								FoodComponent food = item.getItem().getFoodComponent();
								if(bestFood != null) {
									if(food.getHunger() > bestFood.getHunger()) {
										bestFood = food;
										foodSlot = i;
									}
								} else {
									bestFood = food;
									foodSlot = i;
								}
								break;
							} else {
								FoodComponent food = item.getItem().getFoodComponent();
								if(bestFood != null) {
									if(food.getHunger() > bestFood.getHunger()) {
										previousFoodSlot = i;
										previousItemSlot = playerInventory.selectedSlot;
										mc.interactionManager.clickSlot(
												mc.player.playerScreenHandler.syncId,
												i,
												playerInventory.selectedSlot,
												SlotActionType.SWAP,
												mc.player
										);
										bestFood = food;
										foodSlot = playerInventory.selectedSlot;
										break;
									}
								} else {
									previousFoodSlot = i;
									previousItemSlot = playerInventory.selectedSlot;
									mc.interactionManager.clickSlot(
											mc.player.playerScreenHandler.syncId,
											i,
											playerInventory.selectedSlot,
											SlotActionType.SWAP,
											mc.player
									);
									bestFood = food;
									foodSlot = playerInventory.selectedSlot;
									break;
								}
							}
						}
					}
				} else {
					for(int i = 0; i< 9; i++) {
						Item item = mc.player.getInventory().getStack(i).getItem();
						
						if(!item.isFood()) {
							continue;
						}
						FoodComponent food = item.getFoodComponent();
						if(bestFood != null) {
							if(food.getHunger() > bestFood.getHunger()) {
								bestFood = food;
								foodSlot = i;
							}
						} else {
							bestFood = food;
							foodSlot = i;
						}
						
					}
				}
				
				if (bestFood != null) {
					mc.player.getInventory().selectedSlot = foodSlot;
					doEat = true;
					mc.options.useKey.setPressed(true);
				}
			}
		} else {
			if (previousFoodSlot != -1 && previousItemSlot != -1) {
				mc.interactionManager.clickSlot(
						mc.player.playerScreenHandler.syncId,
						previousFoodSlot,
						previousItemSlot,
						SlotActionType.SWAP,
						mc.player
				);
				previousFoodSlot = -1;
				previousItemSlot = -1;
			if (doEat) {
				doEat = false;
				mc.options.useKey.setPressed(false);
			}
			}
		}
		super.onTick();
	}

}
